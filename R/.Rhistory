swirl()
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(my_matrix)
cbind( patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
args(cut)
args(paste)
search()
x <- 1
x
print(x)
msg <- "hello"
msg
print(msg)
1/0
0/0
x <- c(0.5, 0.6)
x
x <- c(TRUE, FALSE)
x
x <- c(T, F)
x
x <- c("a", "b", "c")
x
x <- 9:29
x
x
x <- c(1+0i, 2+4i)
x
x <- vector("numeric", length = 10)
x
attributes(x)
x <- 9:29
attributes(x)
class(x)
y <- c(1.7, "a")
y
y <- c(TRUE, 2)
y
y <- c("a", TRUE)
y
x <- 0:6
x
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
as.complex(x)
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
m
dim(m) <- c(2,5)
m
x <- 1:3
x
y <- 10:12
y
x
cbind(x,y)
rbind(x,y)
x <- 1
x
x <- 1L
x
y <- c(1.7, "a")
y
y <- c(TRUE, 2)
y
y <- c("a", TRUE)
y
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes","no"))
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
x
x
x
x
x
x
x
x
x
x
x
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes","no"))
x
install.packages("RODBC")
install.packages("dplyr")
install.packages("ggplot2")
library("RODBC")
library("dplyr")
library("ggplot2")
conn <- odbcDriverConnect('driver={SQL Server};server=localhost;database=ArchonixPS;trusted_connection=true')
conn <- odbcDriverConnect('driver={SQL Server};server=localhost;database=ArchonixPS;trusted_connection=true')
conn <- odbcDriverConnect('driver={SQL Server};server=localhost;database=ArchonixPS;trusted_connection=true')
install.packages("C:/Users/jayn/Downloads/RODBC_1.3-15.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/jayn/Downloads/RODBC_1.3-15.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/jayn/Downloads/RODBC_1.3-15.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/jayn/Downloads/RODBC_1.3-15.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/jayn/Downloads/RODBC_1.3-15.zip", repos = NULL, type = "win.binary")
conn <- odbcDriverConnect('driver={SQL Server};server=localhost;database=ArchonixPS;trusted_connection=true')
install.packages("C:/Users/jayn/Downloads/RODBC_1.3-15.zip", repos = NULL, type = "win.binary")
install.packages("RODBC")
install.packages("RODBC")
library(RODBC)
conn <- odbcConnect("JAYNSQL")
conn <- odbcConnect("JAYN")
install.packages("ODBC")
install.packages("dbc")
install.packages("odbc")
library(odbc)
conn <- odbcConnect("JAYNSQL")
conn <- odbcConnect("JAYN")
library(odbc)
library(RODBC)
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=JAYN\SQL2014ENT; Database=ArchonixPS;Uid=sa; Pwd=admin123; trusted_connection=yes")
dbconnection <- odbcDriverConnect("Driver=ODBC Driver 11 for SQL Server;Server=localhost; Database=ArchonixPS;Uid=sa; Pwd=admin123; trusted_connection=yes")
library(RODBC)
odbcChannel <- odbcConnect("SQLJN")
odbcChannel <- odbcConnect("JAY")
odbcChannel <- odbcConnect("JAYN")
odbcChannel <- odbcConnect("JAYN")
sqlFetch(odbcChannel, "lstCity")
sqlFetch(odbcChannel, "lstcountry")
data <-sqlQuery(odbcChannel, "select * from lstcounty;")
data <- group_by(data, StateID)
odbcClose()
odbcClose(odbcChannel)
data <-sqlQuery(odbcChannel, "select * from lstcounty;")
odbcChannel <- odbcConnect("JAYN")
odbcClose(odbcChannel)
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
table(x)
x <- factor(c("yes", "yes", "no", "yes", "no"))
table(x)
unclass(x)
x <- c(1,2,nan,na,4)
x <- c(1,2,NaN,na,4)
x <- c(1,2,NaN,NA,4)
x
is.nan(x)
is.na(x)
is.NA(x)
is.na()
is.na(x)
is.namn()
is.nan()
is.nan(x)
x
x <- data.frame(foo=1:4)
x
x <- data.frame(bar=c(T,T,F,F))
x
x <- data.frame(foo=1:4, bar=c(T,T,F,F))
x
nrow(x)
ncol(x)
sd(c(5,8,12))
which.min(c(4,1,6))
Sys.setlocale("LC_ALL","C")
2+
3
2+
WHO
WHO <- read.csv("WHO.csv")
setwd("E:/DB/R")
getwd()
setwd("E:/DB/R")
setwd("E:/DB/DataScience/R")
WHO <- read.csv("WHO.csv")
boxplot(WHO$LifeExpectancy - WHO$Region)
boxplot(WHO$LifeExpectancy ~ WHO$Region)
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab="", ylab="Life Expectancy", main="Life Expectancy by Region")
boxplot(WHO$LifeExpectancy ~ WHO$Region)
boxplot(WHO$LifeExpectancy ~ WHO$Region, xlab="", ylab="Life Expectancy", main="Life Expectancy by Region")
table(WHO$Region)
table(WHO$Region)
tapply(WHO$Over60, WHO$Region, mean)
tapply(WHO$LiteracyRate, WHO$Region, min)
tapply(WHO$LiteracyRate, WHO$Region, min, na.rm=TRUE)
tapply(WHO$LiteracyRate, WHO$Region, min, na.rm=TRUE)
WHO$ChildMortality
tapply(WHO$ChildMortality, WHO$Region, avg)
tapply(WHO$ChildMortality, WHO$Region, average)
tapply(WHO$ChildMortality, WHO$Region, mean)
tapply(WHO$ChildMortality, WHO$Region, mean)
